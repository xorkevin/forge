package model

const templateModel = `// Code generated by {{.Generator}} {{.Version}}; DO NOT EDIT.

package {{.Package}}

import (
	"database/sql"
	"fmt"
	"strings"{{.Imports}}
)

func {{.Prefix}}ModelSetup(db *sql.DB, tableName string) error {
	_, err := db.Exec("CREATE TABLE IF NOT EXISTS "+tableName+" ({{.SQL.Setup}});")
	if err != nil {
		return err
	}
	{{- range .SQL.Indicies }}
	_, err = db.Exec("CREATE INDEX IF NOT EXISTS "+tableName+"_{{.Name}}_index ON "+tableName+" ({{.Columns}});")
	if err != nil {
		return err
	}
	{{- end }}
	return nil
}

func {{.Prefix}}ModelInsert(db *sql.DB, tableName string, m *{{.ModelIdent}}) error {
	_, err := db.Exec("INSERT INTO "+tableName+" ({{.SQL.DBNames}}) VALUES ({{.SQL.Placeholders}});", {{.SQL.Idents}})
	if err != nil {
		return err
	}
	return nil
}

func {{.Prefix}}ModelInsertBulk(db *sql.DB, tableName string, models []*{{.ModelIdent}}, allowConflict bool) error {
	conflictSQL := ""
	if allowConflict {
		conflictSQL = " ON CONFLICT DO NOTHING"
	}
	placeholders := make([]string, 0, len(models))
	args := make([]interface{}, 0, len(models)*{{.SQL.ColNum}})
	for c, m := range models {
		n := c * {{.SQL.ColNum}}
		placeholders = append(placeholders, fmt.Sprintf("({{.SQL.PlaceholderTpl}})", {{.SQL.PlaceholderCount}}))
		args = append(args, {{.SQL.Idents}})
	}
	_, err := db.Exec("INSERT INTO "+tableName+" ({{.SQL.DBNames}}) VALUES "+strings.Join(placeholders, ", ")+conflictSQL+";", args...)
	if err != nil {
		return err
	}
	return nil
}
`
