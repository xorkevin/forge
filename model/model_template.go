package model

const templateModel = `// Code generated by {{.Generator}} {{.Version}}; DO NOT EDIT.

package {{.Package}}

import (
	"database/sql"
	"fmt"
	"github.com/lib/pq"
	"strings"{{.Imports}}
)

const (
	{{.Prefix}}ModelTableName = "{{.TableName}}"
)

func {{.Prefix}}ModelSetup(db *sql.DB) (int, error) {
	_, err := db.Exec("CREATE TABLE IF NOT EXISTS {{.TableName}} ({{.SQL.Setup}});")
	if err != nil {
		return 0, err
	}
	{{- range .SQL.Indicies }}
	_, err = db.Exec("CREATE INDEX IF NOT EXISTS {{$.TableName}}_{{.Name}}_index ON {{$.TableName}} ({{.Columns}});")
	if err != nil {
		if postgresErr, ok := err.(*pq.Error); ok {
			switch postgresErr.Code {
			case "42501": // insufficient_privilege
				return 5, err
			default:
				return 0, err
			}
		}
	}
	{{- end }}
	return 0, nil
}

func {{.Prefix}}ModelInsert(db *sql.DB, m *{{.ModelIdent}}) (int, error) {
	_, err := db.Exec("INSERT INTO {{.TableName}} ({{.SQL.DBNames}}) VALUES ({{.SQL.Placeholders}});", {{.SQL.Idents}})
	if err != nil {
		if postgresErr, ok := err.(*pq.Error); ok {
			switch postgresErr.Code {
			case "23505": // unique_violation
				return 3, err
			default:
				return 0, err
			}
		}
	}
	return 0, nil
}

func {{.Prefix}}ModelInsertBulk(db *sql.DB, models []*{{.ModelIdent}}, allowConflict bool) (int, error) {
	conflictSQL := ""
	if allowConflict {
		conflictSQL = " ON CONFLICT DO NOTHING"
	}
	placeholders := make([]string, 0, len(models))
	args := make([]interface{}, 0, len(models)*{{.SQL.ColNum}})
	for c, m := range models {
		n := c * {{.SQL.ColNum}}
		placeholders = append(placeholders, fmt.Sprintf("({{.SQL.PlaceholderTpl}})", {{.SQL.PlaceholderCount}}))
		args = append(args, {{.SQL.Idents}})
	}
	_, err := db.Exec("INSERT INTO {{.TableName}} ({{.SQL.DBNames}}) VALUES "+strings.Join(placeholders, ", ")+conflictSQL+";", args...)
	if err != nil {
		if postgresErr, ok := err.(*pq.Error); ok {
			switch postgresErr.Code {
			case "23505": // unique_violation
				return 3, err
			default:
				return 0, err
			}
		}
	}
	return 0, nil
}
`
