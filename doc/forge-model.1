.nh
.TH forge(1)Aug 2021
Auto generated by spf13/cobra

.SH NAME
.PP
forge\-model \- Generates models


.SH SYNOPSIS
.PP
\fBforge model [query ...] [flags]\fP


.SH DESCRIPTION
.PP
Generates common SQL patterns needed for relational models

.PP
forge model is called with the following environment variables:

.PP
.RS

.nf
GOPACKAGE: name of the go package
GOFILE: name of the go source file

.fi
.RE

.PP
forge model code generates go functions for SQL select, insert, update, and
delete for a model by default, with additional queries provided as arguments.

.PP
The SQL table's columns for a model are specified by the "model" tag on fields
of a Go struct representing a row of the table. A "model" tag's value has the
following syntax:

.PP
.RS

.nf
column\_name,sql\_type[;opt[,args ...][; ...]]

.fi
.RE

.PP
Fields without a "model" tag are ignored.

.PP
Valid opts are:
	\- index: args(field,...), creates a index from the provided fields and
	current field

.PP
A query allows additional common case select statements to be code generated.
It is specified by a "query" tag on a struct representing a row of the query
result with a value of the syntax:

.PP
.RS

.nf
column\_name[;flag[,args ...][; ...]]

.fi
.RE

.PP
column\_name refers to the column name defined in the model. The go field type
must also be the same between the model and the query.

.PP
Fields without a "query" tag are ignored.

.PP
Valid flags are:
	\- getoneeq: args(equal\_field,...), gets a single row where the equal field(s)
	are equal to the input
	\- getgroup: (no args), gets all rows ordered by the field value
	\- getgroupeq: args(equal\_field,...), gets all rows where the equal field(s)
	are equal to the input ordered by the field value
	\- updeq: args(equal\_field,...), updates all rows where the equal fields(s)
	are equal to the input
	\- deleq: args(equal\_field,...), deletes all rows where the equal fields(s)
	are equal to the input

.PP
equal\_field by default has a condition of eq, but it may be explicitly
specified by column\_name|cond. cond may be one of:
	\- eq: column value equals the input
	\- neq: column value not equal to the input
	\- lt: column value less than the input
	\- leq: column value less than or equal to the input
	\- gt: column value greater than the input
	\- geq: column value greater than or equal to the input
	\- arr: column value equals one of the values of the input set
	\- like: column value like the input


.SH OPTIONS
.PP
\fB\-h\fP, \fB\-\-help\fP[=false]
	help for model

.PP
\fB\-m\fP, \fB\-\-model\fP=""
	name of the model identifier

.PP
\fB\-\-model\-tag\fP="model"
	go struct tag for defining model fields

.PP
\fB\-o\fP, \fB\-\-output\fP="model\_gen.go"
	output filename

.PP
\fB\-p\fP, \fB\-\-prefix\fP=""
	prefix of identifiers in generated file

.PP
\fB\-\-query\-tag\fP="query"
	go struct tag for defining query fields

.PP
\fB\-t\fP, \fB\-\-table\fP=""
	name of the table in the database

.PP
\fB\-v\fP, \fB\-\-verbose\fP[=false]
	increase the verbosity of output


.SH OPTIONS INHERITED FROM PARENT COMMANDS
.PP
\fB\-\-config\fP=""
	config file (default is $XDG\_CONFIG\_HOME/.forge.yaml)


.SH SEE ALSO
.PP
\fBforge(1)\fP


.SH HISTORY
.PP
17\-Aug\-2021 Auto generated by spf13/cobra
