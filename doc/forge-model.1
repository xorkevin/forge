.nh
.TH "forge" "1" "Apr 2023" "" ""

.SH NAME
.PP
forge-model - Generates models


.SH SYNOPSIS
.PP
\fBforge model [query ...] [flags]\fP


.SH DESCRIPTION
.PP
Generates common SQL patterns needed for relational models

.PP
forge model is called with the following environment variables:

.PP
.RS

.nf
GOPACKAGE: name of the go package
GOFILE: name of the go source file

.fi
.RE

.PP
forge model code generates go functions for SQL select, insert, update, and
delete for a model by default, with additional queries provided as arguments.

.PP
The SQL table's columns for a model are specified by the "model" tag on fields
of a Go struct representing a row of the table. A "model" tag's value has the
following syntax:

.PP
.RS

.nf
column_name,sql_type[;opt[,args ...][; ...]]

.fi
.RE

.PP
Fields without a "model" tag are ignored.

.PP
Valid opts are:

.RS
.IP \(bu 2
index: args(field,...), creates a index from the provided fields and
current field

.RE

.PP
A query allows additional common case select statements to be code generated.
It is specified by a "query" tag on a struct representing a row of the query
result with a value of the syntax:

.PP
.RS

.nf
column_name[;flag[,args ...][; ...]]

.fi
.RE

.PP
column_name refers to the column name defined in the model. The go field type
must also be the same between the model and the query.

.PP
Fields without a "query" tag are ignored.

.PP
Valid flags are:

.RS
.IP \(bu 2
getoneeq: args(equal_field,...), gets a single row where the equal field(s)
are equal to the input
.IP \(bu 2
getgroup: (no args), gets all rows ordered by the field value
.IP \(bu 2
getgroupeq: args(equal_field,...), gets all rows where the equal field(s)
are equal to the input ordered by the field value
.IP \(bu 2
updeq: args(equal_field,...), updates all rows where the equal fields(s)
are equal to the input
.IP \(bu 2
deleq: args(equal_field,...), deletes all rows where the equal fields(s)
are equal to the input

.RE

.PP
equal_field by default has a condition of eq, but it may be explicitly
specified by column_name|cond. cond may be one of:

.RS
.IP \(bu 2
eq: column value equals the input
.IP \(bu 2
neq: column value not equal to the input
.IP \(bu 2
lt: column value less than the input
.IP \(bu 2
leq: column value less than or equal to the input
.IP \(bu 2
gt: column value greater than the input
.IP \(bu 2
geq: column value greater than or equal to the input
.IP \(bu 2
in: column value equals one of the values of the input set
.IP \(bu 2
like: column value like the input

.RE


.SH OPTIONS
.PP
\fB-h\fP, \fB--help\fP[=false]
	help for model

.PP
\fB--ignore\fP=""
	regex for filenames of files that should be ignored

.PP
\fB--include\fP=""
	regex for filenames of files that should be included

.PP
\fB--model-directive\fP="forge:model"
	comment directive of types that are models

.PP
\fB--model-tag\fP="model"
	go struct tag for defining model fields

.PP
\fB-o\fP, \fB--output\fP="model_gen.go"
	output filename

.PP
\fB--query-directive\fP="forge:model:query"
	comment directive of types that are model queries

.PP
\fB--query-tag\fP="query"
	go struct tag for defining query fields


.SH OPTIONS INHERITED FROM PARENT COMMANDS
.PP
\fB--log-json\fP[=false]
	output json logs

.PP
\fB--log-level\fP="info"
	log level


.SH SEE ALSO
.PP
\fBforge(1)\fP
