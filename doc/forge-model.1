.nh
.TH "forge" "1" "Aug 2023" "" ""

.SH NAME
.PP
forge-model - Generates models


.SH SYNOPSIS
.PP
\fBforge model [flags]\fP


.SH DESCRIPTION
.PP
Generates common SQL patterns needed for relational models

.PP
forge model is called with the following environment variables:

.PP
.RS

.nf
GOPACKAGE: name of the go package
GOFILE: name of the go source file

.fi
.RE

.PP
forge model code generates go functions for SQL select, insert, update, and
delete for a model. Only structs with the following comment directive are
considered:

.PP
.RS

.nf
//forge:model modelPrefix
Model struct {}

.fi
.RE

.PP
The SQL table's columns for a model are specified by the "model" tag on fields
of a Go struct representing a row of the table. A "model" tag's value has the
following syntax:

.PP
.RS

.nf
column_name,sql_type

.fi
.RE

.PP
Fields without a "model" tag are ignored.

.PP
A query allows additional statements to be code generated. It is specified by a
"model" tag on a struct which represents a column of the query result and has
the following syntax:

.PP
.RS

.nf
column_name[,sql_type]

.fi
.RE

.PP
column_name refers to the column name defined in the model. The go field type
must also be the same between the model and the query. sql_type is optional and
ignored for queries. Likewise, fields without a "model" tag are ignored.

.PP
A separate schema file (model.json by default) is used to specify additional
constraints, conditions, and queries. The schema is as follows:

.PP
.RS

.nf
{
  "modelPrefix": {
    "model": {
      "setup": "optional text appended to the end of the model setup query",
      "constraints": [
        {"kind": "PRIMARY KEY/UNIQUE/etc.", "columns": ["col1", "etc"]}
      ],
      "indicies": [
        {"columns": ["col1", "etc"]}
      ]
    },
    "queries": {
      "StructName": [
        {
          "kind": "getoneeq/getgroup/etc.",
          "name": "QueryName",
          "conditions": [
            {"col": "col1", "cond": "eq (default)/neq/etc."}
          ],
          "order": [
            {"col": "col1", "dir": "empty/ASC/DESC/etc."}
          ]
        }
      ]
    }
  }
}

.fi
.RE

.PP
Valid query kinds are:

.RS
.IP \(bu 2
getoneeq: gets a single row where the equal field(s) are equal to the input
.IP \(bu 2
getgroup: gets all rows
.IP \(bu 2
getgroupeq: gets all rows where the field(s) are equal to the input
.IP \(bu 2
updeq: updates all rows where the fields(s) are equal to the input
.IP \(bu 2
deleq: deletes all rows where the fields(s) are equal to the input

.RE

.PP
field by default has a condition of eq, but it may be explicitly specified.
cond may be one of:

.RS
.IP \(bu 2
eq: column value equals the input
.IP \(bu 2
neq: column value not equal to the input
.IP \(bu 2
lt: column value less than the input
.IP \(bu 2
leq: column value less than or equal to the input
.IP \(bu 2
gt: column value greater than the input
.IP \(bu 2
geq: column value greater than or equal to the input
.IP \(bu 2
in: column value equals one of the values of the input set
.IP \(bu 2
like: column value like the input

.RE


.SH OPTIONS
.PP
\fB-h\fP, \fB--help\fP[=false]
	help for model

.PP
\fB--ignore\fP=""
	regex for filenames of files that should be ignored

.PP
\fB--include\fP=""
	regex for filenames of files that should be included

.PP
\fB--model-directive\fP="forge:model"
	comment directive of types that are models

.PP
\fB--model-tag\fP="model"
	go struct tag for defining model fields

.PP
\fB-o\fP, \fB--output\fP="model_gen.go"
	output filename

.PP
\fB--query-directive\fP="forge:model:query"
	comment directive of types that are model queries

.PP
\fB-s\fP, \fB--schema\fP="model.json"
	model schema


.SH OPTIONS INHERITED FROM PARENT COMMANDS
.PP
\fB--log-json\fP[=false]
	output json logs

.PP
\fB--log-level\fP="info"
	log level


.SH SEE ALSO
.PP
\fBforge(1)\fP
